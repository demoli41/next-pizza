import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { prisma } from '@/prisma/prisma-client';
import { OrderStatus } from '@prisma/client';
import { sendEmail } from '@/shared/lib';
import { CartItemDTO } from '@/shared/services/dto/cart.dto';
import { OrderSuccessTemplate } from '@/shared/components/shared/email-templates/order-success';


const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-06-20',
});

// –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å—É –≤–µ–±—Ö—É–∫–∞.
// –ô–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∑—è—Ç–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–µ–±—Ö—É–∫–∞ –≤ Stripe Dashboard.
const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!;

export async function POST(req: NextRequest) {
  const body = await req.text();
  const signature = req.headers.get('stripe-signature') as string;

  let event: Stripe.Event;

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∑–∞–ø–∏—Ç –¥—ñ–π—Å–Ω–æ –Ω–∞–¥—ñ–π—à–æ–≤ –≤—ñ–¥ Stripe
    event = stripe.webhooks.constructEvent(body, signature, webhookSecret);
  } catch (err: any) {
    console.error(`‚ùå Webhook signature verification failed:`, err.message);
    return NextResponse.json({ error: `Webhook Error: ${err.message}` }, { status: 400 });
  }

  // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó checkout.session.completed
  if (event.type === 'checkout.session.completed') {
    const session = event.data.object as Stripe.Checkout.Session;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î metadata —ñ order_id
    if (!session?.metadata?.order_id) {
        console.error('‚ùå Metadata or order_id missing in session');
        return NextResponse.json({ error: 'Metadata or order_id missing' }, { status: 400 });
    }

    const orderId = Number(session.metadata.order_id);

    try {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      const order = await prisma.order.findUnique({
        where: { id: orderId },
      });

      if (!order) {
        console.error(`‚ùå Order with ID ${orderId} not found.`);
        return NextResponse.json({ error: 'Order not found' }, { status: 404 });
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ–ø–ª–∞—Ç–∞ –¥—ñ–π—Å–Ω–æ —É—Å–ø—ñ—à–Ω–∞ —ñ —á–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —â–µ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–µ
      if (session.payment_status === 'paid' && order.status === OrderStatus.PENDING) {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ SUCCEEDED
        await prisma.order.update({
          where: { id: orderId },
          data: { status: OrderStatus.SUCCEEDED },
        });

        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—Å—Ç –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É
        const items = JSON.parse(order.items as string) as CartItemDTO[];
        await sendEmail(
          order.email,
          'Pizza House | –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–µ',
          OrderSuccessTemplate({
            orderId: order.id,
            items: items, // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∞—à —à–∞–±–ª–æ–Ω –ø—Ä–∏–π–º–∞—î —Ü—ñ –¥–∞–Ω—ñ
          })
        );
         console.log(`‚úÖ Order ${orderId} successfully processed.`);
      }

    } catch (err) {
      console.error('Error processing order:', err);
      return NextResponse.json({ error: 'Server error while processing order' }, { status: 500 });
    }
  } else {
    console.warn(`ü§∑‚Äç‚ôÄÔ∏è Unhandled event type: ${event.type}`);
  }

  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å 200, —â–æ–± Stripe –∑–Ω–∞–≤, —â–æ –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–¥—ñ—é
  return NextResponse.json({ received: true });
}
